package com.github.asm0dey.git_mcp_spring.service;

import org.eclipse.jgit.api.RebaseCommand.InteractiveHandler;
import org.eclipse.jgit.lib.RebaseTodoLine;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * Custom implementation of JGit's InteractiveHandler for interactive rebase operations.
 * This handler applies the predefined rebase plan to the rebase operation.
 */
public class GitRebaseInteractiveHandler implements InteractiveHandler {
    private static final Logger logger = LoggerFactory.getLogger(GitRebaseInteractiveHandler.class);

    private final List<RebaseTodoLine> todoLines;

    /**
     * Creates a new interactive handler with the specified todo lines.
     * 
     * @param todoLines List of rebase todo lines to apply
     */
    public GitRebaseInteractiveHandler(List<RebaseTodoLine> todoLines) {
        this.todoLines = todoLines;
    }

    /**
     * Called before the rebase operation starts.
     * This method allows modifying the steps that will be used for the rebase.
     * 
     * @param steps Default todo lines generated by JGit
     */
    @Override
    public void prepareSteps(List<RebaseTodoLine> steps) {
        logger.debug("Preparing rebase steps: replacing {} default steps with {} custom steps", 
                steps.size(), todoLines.size());

        // Clear the original steps and add our custom steps
        steps.clear();
        steps.addAll(todoLines);
    }

    /**
     * Modifies a commit message during rebase.
     * This implementation returns the original message unchanged.
     * 
     * @param commitMessage Original commit message
     * @return Modified commit message (unchanged in this implementation)
     */
    @Override
    public String modifyCommitMessage(String commitMessage) {
        // Return the original message unchanged
        return commitMessage;
    }
}
